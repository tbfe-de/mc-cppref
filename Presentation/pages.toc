Agenda .....................................................   2
  Interrupts Enabled .......................................   3
Online vs. Offline Resources ...............................   4
  Online Version of this Presentation ......................   5
  External Online Resources ................................   6
    Online C++ References ..................................   7
    Online C++ Compilers ...................................   8
The C/C++ Preprocessor .....................................   9
  Preprocessor Use Cases ...................................  10
    Header Files ...........................................  11
    Include-Guards .........................................  12
    Special Usage Macros ...................................  13
How C++ Extends C ..........................................  14
  Arithmetic Types .........................................  15
    Brace Initialization ...................................  16
    Enforcing Conversions / Suppressing Warnings ...........  17
  Qualifiers Implying Immutability .........................  18
    `const` Is To Ensure Immuability .......................  19
    `constexpr` Is To Ensure Compile Time ..................  20
  Arrays and Pointers ......................................  21
    Indexing and Address Arithmetic ........................  22
    Equivalence of Indexing and Address Arithmetic .........  23
    Arrays .................................................  24
    Arrays (2) .............................................  25
    `const` Arrays .........................................  26
    Pointers ...............................................  27
    Typed Pointers vs. Generic Pointers (`void *`) .........  28
    Arbitrary Type Conversions .............................  29
    `const` Qualifier for Pointers .........................  30
  References ...............................................  31
    References Viewed as Aliases ...........................  32
    References versus Pointers .............................  33
    `const`-References .....................................  34
    Lvalue- and Rvalue-References ..........................  35
    When to Use References? ................................  36
  Default Arguments ........................................  37
  Function Overloading .....................................  38
  Operator Overloading .....................................  39
Object Oriented Programming ................................  40
  From `struct` to `class` .................................  41
    Defining `LimitCounter` Objects ........................  42
    Implementing Member Functions ..........................  43
    Implementing Member Functions Inline ...................  44
    Implementing Members Inside the Class ..................  45
  Access Protection ........................................  46
    Levels of Access Protection ............................  47
    `struct` vs. `class` ...................................  48
  Constructors .............................................  49
    Constructors: Member Initialisation Lists ..............  50
  Destructors ..............................................  51
  Static Members ...........................................  52
  Base and Derived Classes .................................  53
    Derive from a Base Class ...............................  54
    Add Members ............................................  55
    Add A Constructor ......................................  56
    OverflowCounter Overwriting `count` ....................  57
    Reducing Protection of Members .........................  58
    Giving Hints to From Base Classes ......................  59
    Using Hints in Derived Classes .........................  60
  `virtual` Member Functions ...............................  61
    Adding Extension Points in the Base Class ..............  62
    Hooking Code to Extension Points from Derived Classes ..  63
    A Chain of Counters ....................................  64
  Alternative Design .......................................  65
Introduction to Exceptions .................................  66
  Throwing Exceptions ......................................  67
  Catching Exceptions ......................................  68
  Configurable Exceptions ..................................  69
  Configurable Exceptions (2) ..............................  70
Dynamic Memory Allocation ..................................  71
      `RingBuffer` Example .................................  72
      `RingBuffer` Example (2) .............................  73
      `RingBuffer` Example (3) .............................  74
      `RingBuffer` Example (4) .............................  75
      `RingBuffer` Example (5) .............................  76
      `RingBuffer` Example (6) .............................  77
      `RingBuffer` Example (7) .............................  78
  Pointers Revisited .......................................  79
  Smart Pointers ...........................................  80
      `RingBuffer` Example with `std::unique_ptr` ..........  81
  Beyond Unique Ownership ..................................  82
Strings and Streams ........................................  83
  Standard String Class ....................................  84
  Classes for Stream Handling ..............................  85
    A Poor Man's Approach to TDD ...........................  86
    A Poor Man's Approach to TDD (2) .......................  87
Template Introduction ......................................  88
      Template Example .....................................  89
      Template Example (2) .................................  90
      Template Example (3) .................................  91
      Template Example (4) .................................  92
      Template Example (5) .................................  93
      Template Example (6) .................................  94
    Using Templates for Policies ...........................  95
    Using Templates for Policies (2) .......................  96
    Template Meta-Programming ..............................  97
    Boost Call Traits ......................................  98
STL (Containers and Algorithms) ............................  99
  Container Classes from the STL ........................... 100
    Sequential Containers .................................. 101
    Associative Containers ................................. 102
    Generic Container Iterators ............................ 103
    Iterating Over Maps .................................... 104
  STL Algorithms ........................................... 105
    Output to Containers ................................... 106
    Algorithms – A Look Inside ............................. 107
    Specifying Predicates .................................. 108
    C++11 Lambdas .......................................... 109
      Lambda 101 – Definition Syntax Example ............... 110
      Lambda 101 – Argument Lists .......................... 111
      Lambda 101 – Named Lambdas ........................... 112
      Lambda 101 – Capture Lists (Motivation) .............. 113
      Lambda 101 – Capture List Example .................... 114
    Beware of the Pitfalls with Lambdas .................... 115
    Classic C++ Function Objects ........................... 116
    Type Generic Functors .................................. 117
    Local Context by Reference (Functors) .................. 118
    Local Context by Reference (Lambdas) ................... 119
Generalized Callables ...................................... 120
  Use of Callables ......................................... 121
      First Code Example with `std::function`  ............. 122
      Second Code Example with `std::function` ............. 123
    `std::function` Performance Considerations ............. 124
  `std::bind` vs. Lambdas .................................. 125
      Code Example with `std::bind` ........................ 126
    More Pitfalls with Callables ........................... 127
More Library Components .................................... 128
  Durations, Time Points, and Clocks ....................... 129
      Duration Example ..................................... 130
      Clock Example ........................................ 131
  Pseudo Random Numbers .................................... 132
  Regular Expressions ...................................... 133
  Ad-hoc Data Structures: `std::tuple` ..................... 134
    `std::tuple` Typical Implementation .................... 135
      `std::tuple` Example ................................. 136
      `std::tuple` Example (2) ............................. 137
      `std::tuple` Example (3) ............................. 138
      `std::tuple` Example (4) ............................. 139
  Single-Element Containers: `std::optional` ............... 140
    `std::optional` Typical Implementation ................. 141
      `std::optional` Example .............................. 142
      `std::optional` Example (2) .......................... 143
    More Use Cases for `std::optional` ..................... 144
  Generic Pointers with Runtime-Checking): `std::any` ...... 145
  `std::any` Typical Implementation ........................ 146
      `std::any` Example ................................... 147
      `std::any` Example (2) ............................... 148
      `std::any` Example (3) ............................... 149
      `std::any` Example (4) ............................... 150
  Type-Tracking Unions: `std::variant` ..................... 151
  `std::variant` Typical Implementation .................... 152
      `std::variant` Example ............................... 153
      `std::variant` Example (2) ........................... 154
      `std::variant` Example (3) ........................... 155
      `std::variant` Example (4) ........................... 156
      `std::variant` Example (5) ........................... 157
      `std::variant` Example (6) ........................... 158
C++11: Concurrency Basics  ................................. 159
  Parallelizing Independent Tasks .......................... 160
    Foundation: Futures and Promises ....................... 161
      Parallelizing Example ................................ 162
    Default Launch Policy .................................. 163
    Explicit Launch Policies ............................... 164
    Catching Exceptions .................................... 165
    Communication between Independent Tasks ................ 166
    Communicate Failure between Concurrent Tasks ........... 167
  Synchronisation with Mutexes ............................. 168
      Mutex Example (1) .................................... 169
      Mutex Example (2) .................................... 170
    Mutexes and RAII ....................................... 171
    Mutex Variants ......................................... 172
    C++14: Upgradable Locks ................................ 173
    Defeating Deadlocks Caused by Mutex-Locking ............ 174
  One-Time Execution ....................................... 175
      One-Time Execution Example ........................... 176
    Local `static` Initialisation .......................... 177
  Notifications with Condition Variables ................... 178
      Condition Variable Example (1) ....................... 179
      Condition Variable Example (2) ....................... 180
      Condition Variable Example (3) ....................... 181
    Waiting Anatomy ........................................ 182
    Spurious Wakeups ....................................... 183
  Atomic Operation Support ................................. 184
      Atomic Operations Example ............................ 185
    Atomic Operations Recommendation ....................... 186
  Using Class `std::thread` ................................ 187
      Example for Using Class `std::thread` ................ 188
    Recommendations for Using Class `std::thread` .......... 189
  Native Handles ........................................... 190
  Concurrency Recommendations .............................. 191
Appendices and Info-Graphics ............................... 192
    Regular Info-Graphics .................................. 193
    Execution Model ........................................ 194
    Class to Memory Mapping ................................ 195
    Run-Time Type Identification ........................... 196
    Exception Basic Principles ............................. 197
    C++11 Smart Pointers ................................... 198
    Template Classes and Functions ......................... 199
    Parametrizing Types and Sizes .......................... 200
    Basics String Handling ................................. 201
    I/O-Stream Basics ...................................... 202
    STL Architecture Overview .............................. 203
    STL Sequence Containers ................................ 204
    STL Associative Containers ............................. 205
    C++11 Regular Expression API ........................... 206
    Optional Info-Graphics (Mixed 1) ....................... 207
    Optional Info-Graphics (Mixed 2) ....................... 208
    Guiding Principles ..................................... 209
    Classes and Relations (Quick UML) ...................... 210
    Class Relations by Example ............................. 211
    Type Based Branching ................................... 212
    Two Implementations of "Open/Close" .................... 213
    Mutiple Inheritance (Principle) ........................ 214
    Diamond-Shaped Inheritance ............................. 215
    C++98 Iterator Categories .............................. 216
    IteratorSpecific Details ............................... 217
    RAII Style Resource Management ......................... 218
    Specific Exception Details ............................. 219
    Reducing Code Bloat by Templates ....................... 220
